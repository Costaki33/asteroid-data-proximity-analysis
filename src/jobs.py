import json
import os
import uuid
from flask import Flask, request
import redis
from hotqueue import HotQueue

#Gathering the redis_ip for the container
redis_ip = os.environ.get('REDIS_IP')

#Global variable that will store all of the data in redis in db=0
rd = redis.Redis(host=redis_ip, port='6379', db=0)

#Global variable for the queue data strucutre that will store the command from the flask
q = HotQueue('queue', host=redis_ip, port='6379', db=1)

#Global variable that will store all the id values generated when a command is curled
jdb = redis.Redis(host=redis_ip, port='6379', db=2, decode_responses=True)

#Global variable will contain all the returned values to the user after the worker has done the 'work'
answers = redis.Redis(host=redis_ip, port='6379', db=3, decode_responses=True)

#Global variable that will show all the job ids that were created from when a job is requested
job_list = redis.Redis(host=redis_ip, port='6379', db=4, decode_responses=True)

#This function will generate a random jid that will be generated when a job was requested on the flask
def _generate_jid() -> str:
    """
    This function will generate a random identifier for each job that is curled.

    Input:
        (None)

    Output: 
       (string) it will the randomly generated id
    """
    return str(uuid.uuid4())

#This function will genrate a key value for the inputted jid 
def _generate_job_key(jid) -> str:
    """
    This function will generate a key value when the inputting an id number

    Input:
        (jid) (string) it is the randomly generates id for a specific job

    Output:
        (string) it is string that will the key value of the id. An example of what it retruns would
                 like 'jobs.jasdhf9ef9230300'
    """
    return 'job.{}'.format(jid)

#This function will create a jod dictionary when the user curls in a new job 
def _instantiate_job(jid, route, status='in progress', end='not completed'):
    """
    This function will create a dictionary entry for each job. And each job will create and return a job dictionary.
    The job dictionary will contain the folowing key-value pairs.
    1.- jid : (str) job id (randomly generated)
    2.- status : (str) status that will tell if it is in progress or completed
    3.- route : (str) it will be route that the user inputted
    4.- end : (str) it will decide if the job has been completed if it is not then it can't move to the next job

    Inputs: 
         jid (str): It is the job Id that was created 
         status (str): It will have the following status (in progress or complete)
         route (str): It will have the route as a string
         end (str): It will decide if the job has been completed or not

    Output:
        (dict) it will return the dictionary of the job that was curled by the user
    """

    return {
        'id': jid,
        'status': status,
        'route': route,
        'end': end
    }


#This function will save the job key nad job dictionary to the redis database
def _save_job(job_key, job_dict):
    '''
    This function will job key and job dictionary to the redis database.

    Input:
        job_key (str): It is the job key that was generated by the function _generate_job_key(jid) 
        when the jid is inputted

    Output:
        (none): It returns nothing, it just adds the job_key and job_dict into the redis database.
    '''
    jdb.hset(job_key, mapping=job_dict)


#This function will add the jid into the HotQueue
def _queue_job(jid):
    '''
    This function will add the jid into the redis queue. Then the worker.py will dequeue the first 
    jid from the redis queue and will call certain functions in order to do the work that the user is 
    asking to do.

    Input:
        jid (str): It is the string value that represents the job id of a specific job

    Output:
        (none): It will return nothing, it will only add jid into the queue
    '''
    q.put(jid)


#This function will combine different functions together. This function will be used in the api.py file
def add_job(route):
    '''
    This function will combine different functions togther, and this function will be called in the api.py file

    Input:
       route (str): It is the route that the user inputted, from the api

    Output:
       job_dict: it retruns the job dictionary
    '''

    #I think everytime this function gets called, it will generate random id's and they will all be different
    jid = _generate_jid()

    #The values for status and end are all set to predetermined values, so no error should come up
    job_dict = _instantiate_job(jid, route)

    #This will generate the job key of a job from the jid
    job_key = _generate_job_key(jid)

    #This will add the job_key and job_id into the redis db=2
    _save_job(job_key, job_dict)

    #This will add the jid into the redis queue in db=1
    _queue_job(jid)

    return job_dict


#This function will return the job dictionary given a jid
def get_job_by_id(jid):
    """
    This function will return the job dictionary when the jid is inputted. This will be used in the worker.py file

    Input:
        jid (str): It is the jid that was randomly created when the user made a curl

    Output:
        job_dict (dict): It is the job_dict that was created. This will be pulled from the redis database.
    """

    job_dict = jdb.hgetall(_generate_job_key(jid).encode('utf-8'))
    return job_dict


#This will change the the status of the job dictionary, from progress to complete or other status
def update_job_status(jid, status='complete'):
    """
    This function will change the status of the job dictionary and apply those changes into the redis db=2

    Input:
        jid (str): It is the jid that will be generated
        status (str): It will be automatically be set to 'complete' unless otherwise specified

    Output:
       (none) it will return nothing
    """
    
    #The function will return the job dictionary
    job = get_job_by_id(jid)

    if job:
        job['status'] = status
        _save_job(_generate_job_key(jid), job)
        job['end'] = status

    else:
        raise Exception("That job dictionary is not found in redis database")

    
